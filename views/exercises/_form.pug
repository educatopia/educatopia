if page === 'exerciseEdit'
  - var actionUrl = '/exercises/' + exercise.slug
  - var addFieldUrl = actionUrl + '/edit?'

if page === 'exerciseCreate'
  - var actionUrl = '/exercises/create'
  - var addFieldUrl = '/exercises/create?'


mixin textarea(element, field, index)
  - var id = field.slice(0, -1) + index
  label.sr-only(for=id)
    = field.slice(0, -1) + ' ' + index
  textarea.form-control(id=id, name=field)&attributes(attrs ? attrs : {})
    = element

.row
  .col-md-7.col-md-offset-2
    p.form-explanation
      = 'All text areas in the following form support '
      a(href='https://commonmark.org') Markdown
      = ' to format the text. '
      = 'Check out the '
      a(href='https://commonmark.org/help/').
        60 seconds tutorial on the official homepage
      = '. '
      = 'Furthermore, they support '
      a(href='http://asciimath.org') AsciiMath
      = ' to beautifuly layout math formulas. '
      = 'You can find several simple examples on '
      a(href='https://www.intmath.com/help/send-math-email-syntax.php#examples')
        | this website
      = '. '

    p.form-explanation
      | Math must be enclosed in acute accents ( Â´ )
      | and code snippets in grave accents ( ` ).
      | See also:
      | <a href='https://en.wikipedia.org/wiki/Acute_accent#Technical_notes'>
      |    How to type acute accents</a>
      | and
      | <a href='https://en.wikipedia.org/wiki/Grave_accent#Technical_notes'>
      |    how to type grave accents</a>.


form.form-horizontal(
role='form', action=actionUrl, method='POST')

  if exercise && exercise.id
    input.hidden(type='text', name='id', value=exercise.id)

  each fieldset, index in fieldsets
    if !fieldset
      - continue

    fieldset
      if fieldset.legend && (index !== 0 || page === 'exerciseCreate')
          legend
            = fieldset.legend.slice(0,1).toUpperCase() + fieldset.legend.slice(1)

      each field in fieldset.fields
        - var label = field.slice(0, 1).toUpperCase() + field.slice(1)
        - var attrs = schema[field].editorAttrs
        - var help = schema[field].help
        - var subtype = schema[field].subtype
        - var validators = schema[field].validators

        - var fieldId = (subtype == 'textarea') ? field + 'Body' : field


        .form-group(id=field)
          label.col-sm-2.control-label(for=fieldId)
            = label
            if validators && validators.indexOf('required') !== -1
              span= ' *'

          case schema[field].type
            when 'textarea'
              .col-sm-10
                textarea.form-control(id=field, name=field
                )&attributes(attrs)
                  = exercise[field]
                p.help-block.small= help

            when 'number'
              .col-sm-6
                input.col-sm-2.form-control(
                id=field, name=field, type='number', value=exercise[field]
                )&attributes(attrs)
                p.help-block.small= help

            when 'list'
              if subtype == 'textarea'
                  .col-sm-10(id=field + 'Body')
                    if exercise[field]
                      each element, index in exercise[field]
                        +textarea(element, field, index)
                    else
                      +textarea(element, field, 0)

                    button.btn.btn-default.btn-xs(
                    type='submit',
                    formaction= addFieldUrl + field + '#' + field)
                      | Add another #{field.slice(0,-1)}
                    // TODO: Use POST body to send data
                    // (name & value field in submit button)

              else
                .col-sm-10(id=field)
                  input.form-control(
                  id=field + '0', name=field, type=subtype,
                  value=exercise[field] ? (Array.isArray(exercise[field]) ? exercise[field].join(', ') : exercise[field]) : ''
                  )&attributes(attrs ? attrs : {})
                  p.help-block.small
                    = help
                    if schema[field].format
                      |  (#{schema[field].format})

            when 'select'
                .col-sm-10
                  select.form-control(id=field, name=field
                  )&attributes(attrs ? attrs : {})
                    each option in [""].concat(schema[field].options)
                      option(selected=(exercise[field] === option))
                        = option
                  p.help-block.small= help

            when 'date'
              .col-sm-10
                input.form-control(
                id=field, name=field,
                type='datetime',
                value=exercise[field] ? exercise[field].toISOString() : ''
                )&attributes(attrs ? attrs : {})

                p.help-block.small= help

            default
              .col-sm-10
                input.form-control(
                id=field, name=field, type='text', value=exercise[field]
                )&attributes(attrs ? attrs : {})

                p.help-block.small= help

  .form-group
    .col-sm-offset-2.col-sm-10
      button.btn.btn-primary(type='submit') Submit
